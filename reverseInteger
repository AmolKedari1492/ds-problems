/**
 * @param {number} x
 * @return {number}
 */
var reverse = function(x) {
    var n = x * 1;
    var isNeg = n < 0;
    if(isNeg) {
     n = n * -1;  
     }
    var m = [];
    do {
        var k = n % 10;
        n = Math.floor(n / 10);
        m.push(k);
    } while(n !== 0)
    
    m = m.join('');
    m = m * 1;
    m = isNeg? m *-1: m;
    
    if((m > (Math.pow(2,31) - 1)) || (m < Math.pow(-2, 31))) {
        return 0;
    }
    return m;
};

/**
Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

 

Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21
Example 4:

Input: x = 0
Output: 0
*/
